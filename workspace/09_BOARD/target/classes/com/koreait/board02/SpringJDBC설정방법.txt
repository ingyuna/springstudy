SpringJDBC를 활용한 간단게시판 작성

1. web.xml에 아래 태그를 추가한다.
<!-- 인코딩 -->
<filter>
	<filter-name>encodingFilter</filter-name>
	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	<init-param>
		<param-name>encoding</param-name>
		<param-value>UTF-8</param-value>
	</init-param>
	<init-param>
		<param-name>forceEncoding</param-name>
		<param-value>true</param-value>
	</init-param>
</filter>
<filter-mapping>
	<filter-name>encodingFilter</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>

2. pop.xml 최신화를 진행한다.

3. ojbdc6.jar
	* 아래 2가지 중 한 가지만 사용한다.
    1) pop.xml 디펜던시 추가하기        -> 프로젝트에만 넣을 때
       <repositories>
       		<repository>
       			<id>oracle</id>
       			<name>Oracle JDBC Repository</name>
       			<url>https://maven.jahia.org/maven2</url>
       		</repository>
       </repositories>
       <dependencies>
       		<!-- ojdbc6.jar -->
       		<dependency>
       			<groupId>com.oracle</groupId>
				<artifactId>ojdbc6</artifactId>
				<version>12.1.0.2</version>
       		</dependency>
       </dependencies>
    2) tomcat\lib 디렉터리에 ojdbc6.jar 추가하기   -> 프로젝트 상관없이 톰캣에 넣어놓고 모두 쓸 수 있게. (톰캣이 바뀌면 당연히 바꿔줘야한다)
													-> 해당 프로젝트를 사용하는 모든 톰캣은 ojdbc6를 사용할 수 있다.
    
4. spring-jdbc 디펜던시를 추가한다. spring-framework 버전과 맞춘다.    
    <!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-jdbc</artifactId>
	    <version>5.1.4.RELEASE</version>
	</dependency>
    
    
    
    
5.	DataSource를 사용하는 JDBCTemplate template bean을 생성한다. 
	  1) root-context.xml
	  <bean id="dataSource" class="...DriverManagerDataSource">
	  	  <property name="driverClassName=" value="oracle.jdbc.OracleDriver" />
    	  <property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:xe" />
		  <property name="username" value="spring" />
		  <property name="password" value="1111" />
	  </bean>
	  <bean id="template" class="...JdbcTemplate">
	  	  <property name="dataSource" ref="dataSource" />
	  </bean>

	  2) BeanConfiguration.java
	  @Bean
	  public DriverManagerDataSource dataSource() {
	  	  DriverManagerDataSource dataSource = new DriverManagerDataSource();
	  	  dataSource.setDriverClassName("oracle.jdbc.OracleDriver");
	  	  dataSource.setUrl("jdbc:oracle:thin:@127.0.0.1:1521:xe");
	  	  dataSource.setUsername("spring");
	  	  dataSource.setPassword("1111");
	  	  return dataSource;
      }
      @Bean
      public JdbcTemplate template() {
      	JdbcTemplate template = new JdbcTemplate();
      	template.setDataSource(dataSource());
		return template;      
      }
      
      
      
      
      
      
      
      
      
      
    
    